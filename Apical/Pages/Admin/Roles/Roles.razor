@page "/admin/roles"

@layout AdminLayout

@using Microsoft.EntityFrameworkCore

@inject RoleManager<IdentityRole> roleManager

<h3>All Roles</h3>
<h5>User roles that govern site access</h5>
<hr />
@if (roles == null)
{
	<p>Loading...</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Role Name</th>
				<th>Action</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var role in roles)
			{
				<tr>
					<td>@role.Name</td>
					<td>
						<button class="btn btn-danger" @onclick="@(() => DeleteRole(role.Id))">Delete</button>
					</td>
				</tr>
			}
		</tbody>
	</table>

	<br />


	<h3>Add Roles</h3>
	<h5>Creates new roles for the system</h5>
	<hr />
	<form class="form-inline" @onsubmit="@AddRole">
		<div class="form-group">
			<label for="new-role-name">New Role Name:</label>
			<input class="form-control" type="text" id="new-role-name" @bind-value="@newRoleName" />
		</div>
		<button class="btn btn-primary mt-4" type="submit">Add Role</button>
	</form>
}

@code {
	private List<IdentityRole>? roles;
	private string? newRoleName;

	protected override async Task OnInitializedAsync()
	{
		roles = await roleManager.Roles.ToListAsync();
	}

	private async Task AddRole()
	{
		if (!string.IsNullOrEmpty(newRoleName))
		{
			var role = new IdentityRole(newRoleName);
			var result = await roleManager.CreateAsync(role);

			if (result.Succeeded && roles != null)
			{
				roles.Add(role);
				newRoleName = "";
			}
		}
	}

	private async Task DeleteRole(string roleId)
	{
		var role = await roleManager.FindByIdAsync(roleId);

		if (role != null)
		{
			var result = await roleManager.DeleteAsync(role);

			if (result.Succeeded && roles != null)
			{
				roles.Remove(role);
			}
		}
	}
}